package com.exemplo.biblioteca.model;

import java.util.UUID;

public class Livro {
    private UUID id;
    private String titulo;
    private String autor;

    public Livro() {}

    public Livro(UUID id, String titulo, String autor) {
        this.id = id;
        this.titulo = titulo;
        this.autor = autor;
    }

    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public String getTitulo() {
        return titulo;
    }

    public void setTitulo(String titulo) {
        this.titulo = titulo;
    }

    public String getAutor() {
        return autor;
    }

    public void setAutor(String autor) {
        this.autor = autor;
    }
}

java
Copiar código
package com.exemplo.biblioteca.model;

import java.time.LocalDate;
import java.util.UUID;

public class Emprestimo {
    private UUID emprestimoId;
    private UUID livroId;
    private String usuarioId;
    private LocalDate dataEmprestimo;

    public Emprestimo() {}

    public Emprestimo(UUID emprestimoId, UUID livroId, String usuarioId, LocalDate dataEmprestimo) {
        this.emprestimoId = emprestimoId;
        this.livroId = livroId;
        this.usuarioId = usuarioId;
        this.dataEmprestimo = dataEmprestimo;
    }

    public UUID getEmprestimoId() {
        return emprestimoId;
    }

    public void setEmprestimoId(UUID emprestimoId) {
        this.emprestimoId = emprestimoId;
    }

    public UUID getLivroId() {
        return livroId;
    }

    public void setLivroId(UUID livroId) {
        this.livroId = livroId;
    }

    public String getUsuarioId() {
        return usuarioId;
    }

    public void setUsuarioId(String usuarioId) {
        this.usuarioId = usuarioId;
    }

    public LocalDate getDataEmprestimo() {
        return dataEmprestimo;
    }

    public void setDataEmprestimo(LocalDate dataEmprestimo) {
        this.dataEmprestimo = dataEmprestimo;
    }
}

java
Copiar código
package com.exemplo.biblioteca.service;

import com.exemplo.biblioteca.model.Emprestimo;
import com.exemplo.biblioteca.model.Livro;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.time.LocalDate;
import java.util.*;

@Service
public class BibliotecaService {

    private final List<Livro> livrosDisponiveis = new ArrayList<>();
    private final Map<UUID, Emprestimo> emprestimos = new HashMap<>();

    @PostConstruct
    public void init() {
        livrosDisponiveis.add(new Livro(UUID.randomUUID(), "1984", "George Orwell"));
        livrosDisponiveis.add(new Livro(UUID.randomUUID(), "Dom Casmurro", "Machado de Assis"));
        livrosDisponiveis.add(new Livro(UUID.randomUUID(), "A Metamorfose", "Franz Kafka"));
        livrosDisponiveis.add(new Livro(UUID.randomUUID(), "O Pequeno Príncipe", "Antoine de Saint-Exupéry"));
        livrosDisponiveis.add(new Livro(UUID.randomUUID(), "O Hobbit", "J.R.R. Tolkien"));
    }

    public List<Livro> getLivrosDisponiveis() {
        return livrosDisponiveis;
    }

    public List<Emprestimo> getEmprestimos() {
        return new ArrayList<>(emprestimos.values());
    }

    public Emprestimo criarEmprestimo(UUID livroId, String usuarioId) {
        Optional<Livro> livro = livrosDisponiveis.stream()
                .filter(l -> l.getId().equals(livroId))
                .findFirst();

        if (livro.isEmpty()) {
            throw new NoSuchElementException("Livro não encontrado ou já emprestado.");
        }

        livrosDisponiveis.remove(livro.get());

        Emprestimo emprestimo = new Emprestimo(
                UUID.randomUUID(),
                livroId,
                usuarioId,
                LocalDate.now()
        );

        emprestimos.put(emprestimo.getEmprestimoId(), emprestimo);

        return emprestimo;
    }

    public boolean devolverLivro(UUID emprestimoId) {
        Emprestimo emprestimo = emprestimos.remove(emprestimoId);

        if (emprestimo == null) {
            return false;
        }

        Livro livro = new Livro(emprestimo.getLivroId(), "", "");
        livrosDisponiveis.add(livro);

        return true;
    }
}

java
Copiar código
package com.exemplo.biblioteca.controller;

import com.exemplo.biblioteca.model.Emprestimo;
import com.exemplo.biblioteca.model.Livro;
import com.exemplo.biblioteca.service.BibliotecaService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@RestController
public class BibliotecaController {

    @Autowired
    private BibliotecaService service;

    @GetMapping("/livros")
    public ResponseEntity<List<Livro>> getLivros() {
        return ResponseEntity.ok(service.getLivrosDisponiveis());
    }

    @GetMapping("/emprestados")
    public ResponseEntity<List<Emprestimo>> getEmprestimos() {
        return ResponseEntity.ok(service.getEmprestimos());
    }

    @PostMapping("/emprestados")
    public ResponseEntity<?> criarEmprestimo(@RequestBody Map<String, String> body) {
        try {
            UUID livroId = UUID.fromString(body.get("livroId"));
            String usuarioId = body.get("usuarioId");
            Emprestimo emprestimo = service.criarEmprestimo(livroId, usuarioId);
            return ResponseEntity.ok(emprestimo);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }

    @DeleteMapping("/emprestados/{emprestimoId}")
    public ResponseEntity<String> devolverLivro(@PathVariable UUID emprestimoId) {
        boolean sucesso = service.devolverLivro(emprestimoId);
        if (sucesso) {
            return ResponseEntity.ok("Livro devolvido com sucesso.");
        } else {
            return ResponseEntity.badRequest().body("Empréstimo não encontrado.");
        }
    }
}


package com.exemplo.biblioteca;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BibliotecaApplication {
    public static void main(String[] args) {
        SpringApplication.run(BibliotecaApplication.class, args);
    }
}
